buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    defaultConfig {
        applicationId "com.aluvi.android"
        minSdkVersion 11
        targetSdkVersion 22
        versionCode 4
        versionName "1.6"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        dev {
            minSdkVersion 10
            applicationId 'com.aluvi.android.dev'
        }
        nightly {
            ext.betaDistributionEmails="u3amar@hotmail.com, gwen.mckay@aluviapp.com, " +
                    "william.obrien@aluviapp.com, mateo.porter@aluviapp.com, matthew.xi@aluviapp.com"
            minSdkVersion 10
            applicationId 'com.aluvi.android.nightly'

            def Properties versionProps = new Properties()
            def versionPropsFile = file('version.properties')
            if(versionPropsFile.exists())
                versionProps.load(new FileInputStream(versionPropsFile))
            def code = (versionProps['VERSION_CODE'] ?: "0").toInteger() + 1
            versionProps['VERSION_CODE'] = code.toString()
            versionProps.store(versionPropsFile.newWriter(), null)

            versionCode code
            versionName "1.6." + code
        }
        apiDebug {
            minSdkVersion 10
            applicationId 'com.aluvi.android.dev'
        }
    }
    lintOptions {
        abortOnError false
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://maven.fabric.io/public'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile('com.mapbox.mapboxsdk:mapbox-android-sdk:0.7.4@aar') {
        transitive = true
    }
    compile('com.crashlytics.sdk.android:crashlytics:2.5.1@aar') {
        transitive = true;
    }
    // Support/Google Play services
    compile 'com.android.support:support-v4:22.2.1'
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:design:22.2.1'
    compile 'com.android.support:recyclerview-v7:22.2.1'
    compile 'com.google.android.gms:play-services-gcm:7.8.0'
    compile 'com.google.android.gms:play-services-location:7.8.0'
    compile 'com.android.support:multidex:1.0.0'
    // UI Helpers
    compile 'com.github.rey5137:material:1.1.1'
    compile 'com.afollestad:material-dialogs:0.7.6.0'
    compile 'com.sothree.slidinguppanel:library:3.0.0'
    compile 'de.hdodenhof:circleimageview:1.3.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    // Misc utils
    compile 'com.stripe:stripe-android:+'
    compile 'joda-time:joda-time:2.3'
    compile 'io.realm:realm-android:0.82.1'
    // Network Utils
    compile('org.apache.httpcomponents:httpmime:4.3.6') {
        exclude module: 'httpclient'
    }
    compile files('libs/httpcore-4.4.1.jar')
    compile 'com.spothero.volley:volley-jackson-extension:1.0.1'
    compile 'com.fasterxml.jackson.core:jackson-core:2.2.3'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.2.3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.2.3'
    compile 'com.google.code.gson:gson:2.3'
}

task buildAndOtaRelease(dependsOn: ['build', 'crashlyticsUploadDistributionNightlyDebug'])

gradle.taskGraph.beforeTask { Task task ->
    if (task.name ==~ /process.*GoogleServices/) {
        android.applicationVariants.all { variant ->
            if (task.name ==~ /(?i)process${variant.name}GoogleServices/) {
                copy {
                    from "/src/${variant.flavorName}"
                    into '.'
                    include 'google-services.json'
                }
            }
        }
    }
}